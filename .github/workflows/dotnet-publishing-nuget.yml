name: Build and Publish NuGet Packages

on:
  push:
    branches:
      - master
      - develop
      - release/*
      - hotfix/*
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

# Add these permissions
permissions:
 contents: read
 checks: write          # Allows creating test result check runs
 pull-requests: write   # Allows updating PR status
 actions: read
 issues: read

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      nuget-version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}
      is-release: ${{ steps.gitversion.outputs.preReleaseTag == '' }}
      is-prerelease: ${{ steps.gitversion.outputs.preReleaseTag != '' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2
      with:
        useConfigFile: true
        configFilePath: 'GitVersion.yml'

    - name: Display Version Info
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "NuGet Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "Is Release: ${{ steps.gitversion.outputs.preReleaseTag == '' }}"

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release --no-restore \
          /p:Version=${{ steps.gitversion.outputs.assemblySemVer }} \
          /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} \
          /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} \
          /p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}

    - name: Pack NuGet packages
      run: |
        dotnet pack --configuration Release --no-build --output ./artifacts \
          /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} \
          /p:Version=${{ steps.gitversion.outputs.assemblySemVer }} \
          /p:AssemblyVersion=${{ steps.gitversion.outputs.assemblySemVer }} \
          /p:FileVersion=${{ steps.gitversion.outputs.assemblySemFileVer }} \
          /p:InformationalVersion=${{ steps.gitversion.outputs.informationalVersion }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: |
          ./artifacts/*.nupkg
          ./artifacts/*.snupkg
        retention-days: 30

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run on push events (merges)
    if: github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Security Scan with Detailed Report
      id: security-scan
      run: |
        echo "🔍 Running security vulnerability scan..."

        # Run vulnerability scan and capture output
        dotnet list package --vulnerable --include-transitive 2>&1 | tee audit.txt

        # Check for different severity levels
        HIGH_VULNS=$(grep -c "High" audit.txt || true)
        MODERATE_VULNS=$(grep -c "Moderate" audit.txt || true)

        echo "high_vulnerabilities=$HIGH_VULNS" >> $GITHUB_OUTPUT
        echo "moderate_vulnerabilities=$MODERATE_VULNS" >> $GITHUB_OUTPUT

        # Report findings
        if [ $HIGH_VULNS -gt 0 ]; then
          echo "❌ Found $HIGH_VULNS HIGH severity vulnerabilities"
          echo "🚨 Build will fail due to high severity issues"
          exit 1
        elif [ $MODERATE_VULNS -gt 0 ]; then
          echo "⚠️ Found $MODERATE_VULNS MODERATE severity vulnerabilities"
          echo "🟡 Consider updating these packages soon"
          # Don't fail build for moderate issues, but warn
        else
          echo "✅ No vulnerabilities detected"
        fi

    - name: Upload Security Report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: audit.txt
        retention-days: 30

  # Publish to NuGet Job (ONLY runs on merges to protected branches)
  publish-nuget:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: |
      always() &&
      needs.build-and-test.result == 'success' &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      github.event_name == 'push' &&
      (
        github.ref == 'refs/heads/master' ||
        github.ref == 'refs/heads/develop' ||
        startsWith(github.ref, 'refs/heads/release/') ||
        startsWith(github.ref, 'refs/heads/hotfix/') ||
        startsWith(github.ref, 'refs/tags/v')
      )

    environment:
      name: ${{ needs.build-and-test.outputs.is-release == 'true' && 'production' || 'staging' }}
      url: https://www.nuget.org

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Determine publish settings
      id: publish-settings
      run: |
        if [[ "${{ needs.build-and-test.outputs.is-release }}" == "true" ]]; then
          echo "release-type=stable" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "release-type=preview" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/heads/hotfix/* ]]; then
          echo "release-type=hotfix" >> $GITHUB_OUTPUT
        else
          echo "release-type=beta" >> $GITHUB_OUTPUT
        fi

    - name: Validate packages
      run: |
        echo "📦 Packages to be published:"
        ls -la ./artifacts/*.nupkg

        echo "🔍 Package details:"
        for package in ./artifacts/*.nupkg; do
          echo "Package: $(basename $package)"
          dotnet nuget verify "$package" || echo "⚠️ Package verification failed for $package"
        done

    - name: Publish to NuGet
      run: |
        echo "🚀 Publishing ${{ steps.publish-settings.outputs.release-type }} packages..."
        for package in ./artifacts/*.nupkg ./artifacts/*.snupkg; do
          if [[ -f "$package" ]]; then
            echo "Publishing: $(basename $package)"
            dotnet nuget push "$package" \
              --api-key "${{ secrets.NUGET_API_KEY }}" \
              --source "https://api.nuget.org/v3/index.json" \
              --skip-duplicate
          fi
        done

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v') && needs.build-and-test.outputs.is-release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ needs.build-and-test.outputs.version }}
        body: |
          ## 🚀 Release ${{ needs.build-and-test.outputs.version }}

          ### 📦 NuGet Packages
          - Version: `${{ needs.build-and-test.outputs.nuget-version }}`
          - Published to: [NuGet.org](https://www.nuget.org)

          ### 🔧 Installation
          ```bash
          dotnet add package YourPackageName --version ${{ needs.build-and-test.outputs.nuget-version }}
          ```

          ### 📝 Changes
          See the full changelog in the commit history.
        draft: false
        prerelease: false

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-nuget]
    if: always() && (needs.publish-nuget.result == 'success' || needs.publish-nuget.result == 'failure')

    steps:
    - name: Notify Success
      if: needs.publish-nuget.result == 'success'
      run: |
        echo "✅ Successfully published NuGet packages!"
        echo "Version: ${{ needs.build-and-test.outputs.nuget-version }}"
        echo "Type: ${{ needs.build-and-test.outputs.is-release == 'true' && 'Stable Release' || 'Pre-release' }}"

    - name: Notify Failure
      if: needs.publish-nuget.result == 'failure'
      run: |
        echo "❌ Failed to publish NuGet packages!"
        echo "Version: ${{ needs.build-and-test.outputs.nuget-version }}"
        exit 1
