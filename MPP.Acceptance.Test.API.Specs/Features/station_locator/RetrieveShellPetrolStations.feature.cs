// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MPP.Acceptance.Test.API.Specs.Features.Station_Locator
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Retrieve Shell Petrol Stations", Description="\tRetrieve the list of tank/ petrol stations from Station Locator Service.", SourceFile="Features\\station_locator\\RetrieveShellPetrolStations.feature", SourceLine=0)]
    public partial class RetrieveShellPetrolStationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "RetrieveShellPetrolStations.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/station_locator", "Retrieve Shell Petrol Stations", "\tRetrieve the list of tank/ petrol stations from Station Locator Service.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Retrieve Shell Petrol Stations by mandatory query parameters", new string[] {
                "shell-api-stub",
                "ignore"}, SourceLine=4)]
        public virtual void RetrieveShellPetrolStationsByMandatoryQueryParameters()
        {
            string[] tagsOfScenario = new string[] {
                    "shell-api-stub",
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve Shell Petrol Stations by mandatory query parameters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Lat",
                            "Lon",
                            "Radius"});
                table18.AddRow(new string[] {
                            "52.533501",
                            "13.404813",
                            "0.3"});
#line 6
 testRunner.Given("FleetPay mobile app attempts to retrieve the shell petrol stations over API using" +
                        " the query parameters:", ((string)(null)), table18, "Given ");
#line hidden
#line 9
 testRunner.Then("the response status should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table19.AddRow(new string[] {
                            "$.Size()",
                            "@GreaterThan(0)@"});
                table19.AddRow(new string[] {
                            "$.[?(@.fullStationIdentifier == \'1\')].KeySet()",
                            "@HasItemsInAnyOrder(\'id\',\'name\',\'telephone\',\'address\',\'lat\',\'lon\',\'fuelTypes\',\'am" +
                                "enities\',\'openingHours\',\'fullStationIdentifier\')@"});
#line 10
 testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table19, "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table20.AddRow(new string[] {
                            "$.[?(@.fullStationIdentifier == \'1\')].id",
                            "@EqualsTo(12170818)@"});
#line 14
 testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table20, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
