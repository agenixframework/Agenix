// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MPP.Acceptance.Test.API.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Create User Successfully", SourceFile="Features\\CreateUser.feature", SourceLine=0)]
    public partial class CreateUserSuccessfullyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CreateUser.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create User Successfully", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Create an user successfully using variables", Description="This scenario covers the case when the operator is willing to create a user via h" +
            "ttps://reqres.in/api/users", SourceLine=2)]
        public virtual void CreateAnUserSuccessfullyUsingVariables()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an user successfully using variables", "This scenario covers the case when the operator is willing to create a user via h" +
                    "ttps://reqres.in/api/users", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table1.AddRow(new string[] {
                            "name",
                            "Morpheus"});
                table1.AddRow(new string[] {
                            "job",
                            "Leader"});
#line 7
   testRunner.Given("variables", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Job"});
                table2.AddRow(new string[] {
                            "${name}",
                            "${job}"});
#line 12
   testRunner.And("the following user list", ((string)(null)), table2, "And ");
#line hidden
#line 16
   testRunner.When("the operator attempts to create an user over API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
   testRunner.Then("the response status should be \"201\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "VariableName"});
                table3.AddRow(new string[] {
                            "$.Name",
                            "Name"});
                table3.AddRow(new string[] {
                            "$.Job",
                            "Job"});
                table3.AddRow(new string[] {
                            "$.KeySet()",
                            "KeySet"});
                table3.AddRow(new string[] {
                            "$.Size()",
                            "Size"});
                table3.AddRow(new string[] {
                            "$.id",
                            "Id"});
#line 20
   testRunner.And("the values are extracted into the variables from the JSON response body:", ((string)(null)), table3, "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table4.AddRow(new string[] {
                            "$.Name",
                            "@StartsWith(\'Morp\')@"});
                table4.AddRow(new string[] {
                            "$.Job",
                            "@EndsWith(\'der\')@"});
#line 28
   testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table5.AddRow(new string[] {
                            "$.Name",
                            "@EqualsIgnoreCase(\'${Name}\')@"});
                table5.AddRow(new string[] {
                            "$.id",
                            "@IsNumber(\'${Id}\')@"});
#line 33
   testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Create an user successfully using examples of Functions", SourceLine=37)]
        public virtual void CreateAnUserSuccessfullyUsingExamplesOfFunctions()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an user successfully using examples of Functions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value"});
                table6.AddRow(new string[] {
                            "name",
                            "core:UpperCase(\'Morpheus\')"});
                table6.AddRow(new string[] {
                            "job",
                            "core:LowerCase(\'LEADER\')"});
#line 40
   testRunner.Given("variables", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Job"});
                table7.AddRow(new string[] {
                            "${name}",
                            "${job}"});
#line 45
   testRunner.And("the following user list", ((string)(null)), table7, "And ");
#line hidden
#line 49
   testRunner.When("the operator attempts to create an user over API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
   testRunner.Then("the response status should be \"201\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "VariableName"});
                table8.AddRow(new string[] {
                            "$.Name",
                            "Name"});
                table8.AddRow(new string[] {
                            "$.Job",
                            "Job"});
                table8.AddRow(new string[] {
                            "$.KeySet()",
                            "KeySet"});
                table8.AddRow(new string[] {
                            "$.Size()",
                            "Size"});
                table8.AddRow(new string[] {
                            "$.id",
                            "Id"});
#line 53
   testRunner.And("the values are extracted into the variables from the JSON response body:", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table9.AddRow(new string[] {
                            "$.Name",
                            "@StartsWith(${Name})@"});
                table9.AddRow(new string[] {
                            "$.Job",
                            "@EndsWith(core:LowerCase(\'DER\'))@"});
#line 61
   testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table10.AddRow(new string[] {
                            "$.Name",
                            "@EqualsIgnoreCase(\'${Name}\')@"});
                table10.AddRow(new string[] {
                            "$.id",
                            "@IsNumber(\'${Id}\')@"});
#line 66
   testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
