// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FleetPay.Acceptance.Test.API.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Retrieve user details", Description="  As an Operator\r\n  I want to retrieve the User details\r\n  So that the front-end " +
        "is tested against a real API\r\n  Covers a variety of positive scenarios associate" +
        "d with retrieval of the user details on behalf of operator across API", SourceFile="Features\\RetrieveUser.feature", SourceLine=0)]
    public partial class RetrieveUserDetailsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "RetrieveUser.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Retrieve user details", "  As an Operator\r\n  I want to retrieve the User details\r\n  So that the front-end " +
                    "is tested against a real API\r\n  Covers a variety of positive scenarios associate" +
                    "d with retrieval of the user details on behalf of operator across API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Retrieve user details by Id successfully", Description="  This scenario covers the case when a participant attempts to retrieve user deta" +
            "ils over API\r\n  and check the response details", SourceLine=6)]
        public virtual void RetrieveUserDetailsByIdSuccessfully()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve user details by Id successfully", "  This scenario covers the case when a participant attempts to retrieve user deta" +
                    "ils over API\r\n  and check the response details", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.When("the operator attempts to retrieve the user details by Id \"2\" over API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("the response status should be \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table14.AddRow(new string[] {
                            "$.data.id",
                            "@IsNumber(\'2\')@"});
                table14.AddRow(new string[] {
                            "$.data.email",
                            "@EqualsTo(janet.weaver@reqres.in)@"});
                table14.AddRow(new string[] {
                            "$.data.first_name",
                            "@EqualsTo(Janet)@"});
                table14.AddRow(new string[] {
                            "$.data.last_name",
                            "@EqualsTo(Weaver)@"});
                table14.AddRow(new string[] {
                            "$.data.avatar",
                            "@EndsWith(\'/img/faces/2-image.jpg\')@"});
                table14.AddRow(new string[] {
                            "$.support.url",
                            "@EndsWith(\'/#support-heading\')@"});
                table14.AddRow(new string[] {
                            "$.support.text",
                            "@EqualsIgnoreCase(\'To keep ReqRes free, contributions towards server costs are ap" +
                                "preciated!\')@"});
#line 12
 testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "JsonPathExpression",
                            "MatcherName"});
                table15.AddRow(new string[] {
                            "$.KeySet()",
                            "@ContainsItem(\'data\')@"});
                table15.AddRow(new string[] {
                            "$.data.KeySet()",
                            "@HasItemsInAnyOrder(\'id\',\'email\',\'first_name\',\'avatar\',\'last_name\')@"});
                table15.AddRow(new string[] {
                            "$.support.KeySet()",
                            "@HasItems(\'url\',\'text\')@"});
#line 21
 testRunner.And("the JSON response body is validated using the json path expressions with associat" +
                        "ed matchers:", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "HeaderName",
                            "VariableName"});
                table16.AddRow(new string[] {
                            "Content-Type",
                            "ContentTypeVariable"});
#line 26
 testRunner.And("the values are extracted into the variables from the JSON response headers:", ((string)(null)), table16, "And ");
#line hidden
#line 29
 testRunner.And("echo \"The value for content type is: ${ContentTypeVariable}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "HeaderName",
                            "MatcherName"});
                table17.AddRow(new string[] {
                            "Content-Type",
                            "@EqualsIgnoreCase(\'application/json; charset=utf-8\')@"});
                table17.AddRow(new string[] {
                            "Transfer-Encoding",
                            "@EqualsIgnoreCase(\'chunked\')@"});
                table17.AddRow(new string[] {
                            "Connection",
                            "@EqualsIgnoreCase(\'keep-alive\')@"});
#line 30
 testRunner.And("the JSON response headers are validated using matchers:", ((string)(null)), table17, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
